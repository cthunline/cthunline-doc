openapi: 3.0.3
info:
  version: v1.0
  title: Cthunline REST API
paths:
  /api/assets:
    get: &ref_0
      tags:
        - Assets
      summary: Get assets
      description: Gets all assets of the authenticated user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: include
          description: If true will include directory data
          required: false
          in: query
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetList'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post: &ref_1
      tags:
        - Assets
      summary: Upload assets
      description: Upload one or more assets for the authenticated user
      consumes:
        - image/jpeg
        - image/png
        - image/svg+xml
        - audio/mpeg
      requestBody: null
      content:
        multipart/form-data:
          schema:
            $ref: ../../schemas/assets.yaml#/AssetUploadBody
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetList'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/assets/:assetId:
    get: &ref_2
      tags:
        - Assets
      summary: Get an asset
      description: Gets an asset belonging to the authenticated user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: assetId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete: &ref_3
      tags:
        - Assets
      summary: Delete an asset
      description: Deletes an assert belonging to the authenticated user
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
        - name: assetId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/directories:
    get: *ref_0
    post: *ref_1
  /api/directories/:directoryId:
    get: *ref_2
    delete: *ref_3
  /api/auth:
    get:
      tags:
        - Authentication
      summary: Check authentication
      description: >-
        This endpoint can be called to check the validity of the authentication
        cookie
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Authentication
      summary: Login
      description: >-
        Use this endpoint to authenticate into the API using an email and a
        password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Authentication
      summary: Logout
      description: Revokes current authentication
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/characters:
    get:
      tags:
        - Characters
      summary: Get all characters
      description: ''
      parameters:
        - name: user
          required: false
          in: query
          schema:
            type: number
          description: >-
            Will return only characters belonging to the target user (must be
            the ID of the user)
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterList'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Characters
      summary: Create a character
      description: Creates a character for the current authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterCreateBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/characters/:characterId:
    get:
      tags:
        - Characters
      summary: Get a character
      description: ''
      parameters:
        - name: characterId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Characters
      summary: Update a character
      description: Updates a character belonging to the current authenticated user
      parameters:
        - name: characterId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CharacterEditBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Characters
      summary: Delete a character
      description: Deletes a character belonging to the current authenticated user
      parameters:
        - name: characterId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/characters/:characterId/portrait:
    post:
      tags:
        - Characters
      summary: Upload a portrait
      description: >-
        Uploads a portrait for a character belonging to the current
        authenticated user
      parameters:
        - name: characterId
          required: true
          in: path
          schema:
            type: number
      consumes:
        - image/jpeg
        - image/png
        - image/svg+xml
      requestBody: null
      content:
        multipart/form-data:
          schema:
            $ref: ../../schemas/characters.yaml#/PortraitUploadBody
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Characters
      summary: Delete the portrait of a character
      parameters:
        - name: characterId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/configuration:
    get:
      tags:
        - Configuration
      summary: Get public configuration
      description: Public configuration contains useful information about the instance
      security: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Configuration'
        '500':
          $ref: '#/components/responses/Error'
  /api/games:
    get:
      tags:
        - Games
      summary: Get all games
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameList'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/games/{gameId}:
    get:
      tags:
        - Games
      summary: Get a game
      description: ''
      parameters:
        - name: gameId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/sessions/:sessionId/notes:
    get:
      tags:
        - Notes
      summary: Get session notes
      description: Get session notes for the current authenticated user
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: number
        - name: include
          description: If true will include user data
          required: false
          in: query
          schema:
            type: string
            enum:
              - 'true'
              - 'false'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notes'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Notes
      summary: Create note in session
      description: Create a note in a session for the current authenticated user
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteCreateBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/notes/:noteId:
    get:
      tags:
        - Notes
      summary: Get a note
      description: Get a note belonging to (or shared with) the current authenticated user
      parameters:
        - name: noteId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Notes
      summary: Update a note
      description: Updates a note belonging to the current authenticated user
      parameters:
        - name: noteId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteData'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Notes
      summary: Delete a note
      description: Deletes a note belonging to the current authenticated user
      parameters:
        - name: noteId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/notes/:noteId/:action:
    put:
      tags:
        - Notes
      summary: Move a note's position
      description: >-
        Moves up or down a note in the note list (up decreases position, down
        increases position)
      parameters:
        - name: noteId
          required: true
          in: path
          schema:
            type: number
        - name: action
          required: true
          in: path
          schema:
            type: string
            enum:
              - up
              - down
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Note'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/sessions:
    get:
      tags:
        - Sessions
      summary: Get all sessions
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionList'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Sessions
      summary: Create a session
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionCreateBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/sessions/:sessionId:
    get:
      tags:
        - Sessions
      summary: Get a session
      description: ''
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Sessions
      summary: Update a session
      description: ''
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SessionEditBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Sessions
      summary: Delete a session
      description: ''
      parameters:
        - name: sessionId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/sketchs:
    get:
      tags:
        - Sketchs
      summary: Get all sketchs belonging to the current user
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SketchList'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Sketchs
      summary: Save a sketch for the current user
      description: ''
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SketchCreateBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sketch'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/sketchs/:sketchId:
    get:
      tags:
        - Sketchs
      summary: Get a sketch belonging to the current user
      description: ''
      parameters:
        - name: sketchId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sketch'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    delete:
      tags:
        - Sketchs
      summary: Delete a sketch belonging to the current user
      description: ''
      parameters:
        - name: sketchId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: ''
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '401':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Users
      summary: Create a user
      description: Only administrators can create new users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/users/{userId}:
    get:
      tags:
        - Users
      summary: Get a user
      description: ''
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
    post:
      tags:
        - Users
      summary: Edit a user
      description: Users can only be edited by themselved or administrators
      parameters:
        - name: userId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/register:
    post:
      tags:
        - Users
      summary: Register a user
      description: This endpoint is reachable only if registrations are enabled
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterBody'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
  /api/invitation:
    post:
      tags:
        - Users
      summary: Generate an invitation code
      description: >-
        This endpoint is reachable only if registration and invitation are
        enabled
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: Invitation code
                    example: 3a1e781ca6fb85bd
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '500':
          $ref: '#/components/responses/Error'
components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: Authentication cookie
  schemas:
    Id:
      type: object
      properties:
        id:
          type: number
    AssetData:
      type: object
      properties:
        type:
          type: string
          enum:
            - image
            - audio
          description: Asset type
        name:
          type: string
          description: Asset name
        path:
          type: string
          description: Asset path
        userId:
          type: number
          description: Id of user owning the asset
        directoryId:
          type: number
          description: Id of directory containing the asset
    CreateUpdateInfo:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: Creation date
        updatedAt:
          type: string
          format: date-time
          description: Last update date
    Asset:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/AssetData'
        - $ref: '#/components/schemas/CreateUpdateInfo'
    AssetList:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    BaseData:
      type: object
      properties:
        name:
          type: string
          minLength: 6
          description: User name
          example: lucie.bronze
        email:
          type: string
          format: email
          minLength: 6
          description: User email
    MetaData:
      type: object
      properties:
        locale:
          type: string
          format: country-code
          enum:
            - en
            - fr
          description: User configured language
        theme:
          type: string
          enum:
            - light
            - dark
          description: User configured theme
        isAdmin:
          type: boolean
          description: If user is an administrator
        isEnabled:
          type: boolean
          description: If user account is enabled
    User:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/BaseData'
        - $ref: '#/components/schemas/MetaData'
        - $ref: '#/components/schemas/CreateUpdateInfo'
    AuthLoginBody:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email
        password:
          type: string
          description: User password
      required:
        - email
        - password
    CharacterGameId:
      type: object
      properties:
        gameId:
          type: string
          description: Game Id
    CharacterUserId:
      type: object
      properties:
        userId:
          type: string
          description: User Id
    CharacterName:
      type: object
      properties:
        gameId:
          type: string
          description: Name of the character
    CoCBiography: &ref_4
      additionalProperties: false
      properties:
        age:
          type: number
        birthPlace:
          type: string
        name:
          type: string
        occupation:
          type: string
        residence:
          type: string
      type: object
    CoCCharacteristic: &ref_5
      additionalProperties: false
      properties:
        fifth:
          type: number
        half:
          type: number
        regular:
          type: number
      type: object
    CoCCharacteristics: &ref_6
      additionalProperties: false
      properties:
        appearance:
          $ref: '#/components/schemas/CoCCharacteristic'
        constitution:
          $ref: '#/components/schemas/CoCCharacteristic'
        dexterity:
          $ref: '#/components/schemas/CoCCharacteristic'
        education:
          $ref: '#/components/schemas/CoCCharacteristic'
        intelligence:
          $ref: '#/components/schemas/CoCCharacteristic'
        power:
          $ref: '#/components/schemas/CoCCharacteristic'
        size:
          $ref: '#/components/schemas/CoCCharacteristic'
        strength:
          $ref: '#/components/schemas/CoCCharacteristic'
      type: object
    CoCCombat: &ref_7
      additionalProperties: false
      properties:
        build:
          type: string
        damageBonus:
          type: string
        move:
          type: number
      type: object
    CoCLuck: &ref_8
      additionalProperties: false
      properties:
        current:
          type: number
        starting:
          type: number
      type: object
    CoCPoint: &ref_9
      additionalProperties: false
      properties:
        current:
          type: number
        maximum:
          type: number
      type: object
    CoCPoints: &ref_10
      additionalProperties: false
      properties:
        hitPoints:
          $ref: '#/components/schemas/CoCPoint'
        magicPoints:
          $ref: '#/components/schemas/CoCPoint'
      type: object
    CoCSanity: &ref_11
      additionalProperties: false
      properties:
        current:
          type: number
        maximum:
          type: number
        starting:
          type: number
      type: object
    CoCSkill: &ref_12
      additionalProperties: false
      properties:
        base:
          type: string
        developed:
          type: boolean
        development:
          type: boolean
        fifth:
          type: number
        half:
          type: number
        name:
          type: string
        regular:
          type: number
      type: object
    CoCStatus: &ref_13
      additionalProperties: false
      properties:
        dying:
          type: boolean
        indefiniteInsanity:
          type: boolean
        majorWound:
          type: boolean
        temporaryInsanity:
          type: boolean
        unconscious:
          type: boolean
      type: object
    CoCStory: &ref_14
      additionalProperties: false
      properties:
        arcaneTomesAndSpells:
          type: string
        assets:
          type: string
        cash:
          type: string
        encountersWithStrangeEntities:
          type: string
        fellowInvestigators:
          type: string
        gearAndPossessions:
          type: string
        ideologyAndBeliefs:
          type: string
        injuriesAndScars:
          type: string
        meaningfulLocations:
          type: string
        personalDescription:
          type: string
        phobiasAndManias:
          type: string
        significantPeople:
          type: string
        spendingLevel:
          type: string
        story:
          type: string
        traits:
          type: string
        treasuredPossessions:
          type: string
      type: object
    CoCWeapon: &ref_15
      additionalProperties: false
      properties:
        ammo:
          type: string
        attacks:
          type: string
        damage:
          type: string
        malfunction:
          type: string
        name:
          type: string
        range:
          type: string
      type: object
    CoCCharacter:
      additionalProperties: false
      definitions:
        CoCBiography: *ref_4
        CoCCharacteristic: *ref_5
        CoCCharacteristics: *ref_6
        CoCCombat: *ref_7
        CoCLuck: *ref_8
        CoCPoint: *ref_9
        CoCPoints: *ref_10
        CoCSanity: *ref_11
        CoCSkill: *ref_12
        CoCStatus: *ref_13
        CoCStory: *ref_14
        CoCWeapon: *ref_15
      properties:
        biography:
          $ref: '#/components/schemas/CoCBiography'
        characteristics:
          $ref: '#/components/schemas/CoCCharacteristics'
        combat:
          $ref: '#/components/schemas/CoCCombat'
        luck:
          $ref: '#/components/schemas/CoCLuck'
        points:
          $ref: '#/components/schemas/CoCPoints'
        portrait:
          type: string
        sanity:
          $ref: '#/components/schemas/CoCSanity'
        skills:
          items:
            $ref: '#/components/schemas/CoCSkill'
          type: array
        status:
          $ref: '#/components/schemas/CoCStatus'
        story:
          $ref: '#/components/schemas/CoCStory'
        weapons:
          items:
            $ref: '#/components/schemas/CoCWeapon'
          type: array
      type: object
    DnD5Ability: &ref_17
      additionalProperties: false
      properties:
        modifier:
          type: number
        score:
          type: number
      type: object
    DnD5Abilities: &ref_16
      additionalProperties: false
      properties:
        charisma:
          $ref: '#/components/schemas/DnD5Ability'
        constitution:
          $ref: '#/components/schemas/DnD5Ability'
        dexterity:
          $ref: '#/components/schemas/DnD5Ability'
        intelligence:
          $ref: '#/components/schemas/DnD5Ability'
        strength:
          $ref: '#/components/schemas/DnD5Ability'
        wisdom:
          $ref: '#/components/schemas/DnD5Ability'
      type: object
    DnD5Attack: &ref_18
      additionalProperties: false
      properties:
        attackBonus:
          type: number
        damage:
          type: string
        name:
          type: string
        type:
          type: string
      type: object
    DnD5Biography: &ref_19
      additionalProperties: false
      properties:
        alignment:
          type: string
        background:
          type: string
        class:
          type: string
        description:
          type: string
        level:
          type: number
        name:
          type: string
        race:
          type: string
      type: object
    DnD5DeathSaves: &ref_21
      additionalProperties: false
      properties:
        failures:
          type: number
        successes:
          type: number
      type: object
    DnD5HitPoints: &ref_24
      additionalProperties: false
      properties:
        current:
          type: number
        maximum:
          type: number
        temporary:
          type: number
      type: object
    DnD5Combat: &ref_20
      additionalProperties: false
      properties:
        armorClass:
          type: number
        deathSaves:
          $ref: '#/components/schemas/DnD5DeathSaves'
        hitDice:
          type: string
        hitPoints:
          $ref: '#/components/schemas/DnD5HitPoints'
        initiative:
          type: number
        speed:
          type: number
      type: object
    DnD5Money: &ref_25
      additionalProperties: false
      properties:
        copper:
          type: number
        electrum:
          type: number
        gold:
          type: number
        platinum:
          type: number
        silver:
          type: number
      type: object
    DnD5Equipment: &ref_22
      additionalProperties: false
      properties:
        items:
          type: string
        money:
          $ref: '#/components/schemas/DnD5Money'
        treasure:
          type: string
      type: object
    DnD5Features: &ref_23
      additionalProperties: false
      properties:
        featuresAndTraits:
          type: string
        proficienciesAndLanguages:
          type: string
      type: object
    DnD5Skill: &ref_27
      additionalProperties: false
      properties:
        modifier:
          type: number
        proficient:
          type: boolean
      type: object
    DnD5SavingThrows: &ref_26
      additionalProperties: false
      properties:
        charisma:
          $ref: '#/components/schemas/DnD5Skill'
        constitution:
          $ref: '#/components/schemas/DnD5Skill'
        dexterity:
          $ref: '#/components/schemas/DnD5Skill'
        intelligence:
          $ref: '#/components/schemas/DnD5Skill'
        strength:
          $ref: '#/components/schemas/DnD5Skill'
        wisdom:
          $ref: '#/components/schemas/DnD5Skill'
      type: object
    DnD5Skills: &ref_28
      additionalProperties: false
      properties:
        acrobatics:
          $ref: '#/components/schemas/DnD5Skill'
        animalHandling:
          $ref: '#/components/schemas/DnD5Skill'
        arcana:
          $ref: '#/components/schemas/DnD5Skill'
        athletics:
          $ref: '#/components/schemas/DnD5Skill'
        deception:
          $ref: '#/components/schemas/DnD5Skill'
        history:
          $ref: '#/components/schemas/DnD5Skill'
        insight:
          $ref: '#/components/schemas/DnD5Skill'
        intimidation:
          $ref: '#/components/schemas/DnD5Skill'
        investigation:
          $ref: '#/components/schemas/DnD5Skill'
        medicine:
          $ref: '#/components/schemas/DnD5Skill'
        nature:
          $ref: '#/components/schemas/DnD5Skill'
        perception:
          $ref: '#/components/schemas/DnD5Skill'
        performance:
          $ref: '#/components/schemas/DnD5Skill'
        persuasion:
          $ref: '#/components/schemas/DnD5Skill'
        religion:
          $ref: '#/components/schemas/DnD5Skill'
        sleightOfHand:
          $ref: '#/components/schemas/DnD5Skill'
        stealth:
          $ref: '#/components/schemas/DnD5Skill'
        survival:
          $ref: '#/components/schemas/DnD5Skill'
      type: object
    DnD5Spell: &ref_29
      additionalProperties: false
      properties:
        name:
          type: string
        prepared:
          type: boolean
      type: object
    DnD5SpellLevel: &ref_30
      additionalProperties: false
      properties:
        level:
          type: number
        slotsExpended:
          type: number
        slotsTotal:
          type: number
        spells:
          items:
            $ref: '#/components/schemas/DnD5Spell'
          type: array
      type: object
    DnD5Spellcasting: &ref_31
      additionalProperties: false
      properties:
        cantrips:
          items:
            type: string
          type: array
        class:
          type: string
        levels:
          items:
            $ref: '#/components/schemas/DnD5SpellLevel'
          type: array
        spellAbility:
          type: number
        spellAttackBonus:
          type: number
        spellSaveDC:
          type: number
      type: object
    DnD5Statistics: &ref_32
      additionalProperties: false
      properties:
        experiencePoints:
          type: number
        inspiration:
          type: number
        passiveWisdom:
          type: number
        proficiencyBonus:
          type: number
      type: object
    DnD5Story: &ref_33
      additionalProperties: false
      properties:
        alliesAndOrganizations:
          type: string
        backstory:
          type: string
        bonds:
          type: string
        flaws:
          type: string
        ideals:
          type: string
        personalityTraits:
          type: string
      type: object
    DnD5Character:
      additionalProperties: false
      definitions:
        DnD5Abilities: *ref_16
        DnD5Ability: *ref_17
        DnD5Attack: *ref_18
        DnD5Biography: *ref_19
        DnD5Combat: *ref_20
        DnD5DeathSaves: *ref_21
        DnD5Equipment: *ref_22
        DnD5Features: *ref_23
        DnD5HitPoints: *ref_24
        DnD5Money: *ref_25
        DnD5SavingThrows: *ref_26
        DnD5Skill: *ref_27
        DnD5Skills: *ref_28
        DnD5Spell: *ref_29
        DnD5SpellLevel: *ref_30
        DnD5Spellcasting: *ref_31
        DnD5Statistics: *ref_32
        DnD5Story: *ref_33
      properties:
        abilities:
          $ref: '#/components/schemas/DnD5Abilities'
        attacks:
          items:
            $ref: '#/components/schemas/DnD5Attack'
          type: array
        biography:
          $ref: '#/components/schemas/DnD5Biography'
        combat:
          $ref: '#/components/schemas/DnD5Combat'
        equipment:
          $ref: '#/components/schemas/DnD5Equipment'
        features:
          $ref: '#/components/schemas/DnD5Features'
        portrait:
          type: string
        savingThrows:
          $ref: '#/components/schemas/DnD5SavingThrows'
        skills:
          $ref: '#/components/schemas/DnD5Skills'
        spellcasting:
          $ref: '#/components/schemas/DnD5Spellcasting'
        statistics:
          $ref: '#/components/schemas/DnD5Statistics'
        story:
          $ref: '#/components/schemas/DnD5Story'
      type: object
    SeventhSeaAdvantage: &ref_34
      additionalProperties: false
      properties:
        description:
          type: string
        name:
          type: string
      type: object
    SeventhSeaArcana: &ref_35
      additionalProperties: false
      properties:
        hubris:
          type: string
        name:
          type: string
        virtue:
          type: string
      type: object
    SeventhSeaBackground: &ref_36
      additionalProperties: false
      properties:
        description:
          type: string
        name:
          type: string
        quirk:
          type: string
      type: object
    SeventhSeaBiography: &ref_37
      additionalProperties: false
      properties:
        concept:
          type: string
        name:
          type: string
        nation:
          type: string
        religion:
          type: string
        reputations:
          type: string
        wealth:
          type: number
      type: object
    SeventhSeaSkills: &ref_38
      additionalProperties: false
      properties:
        aim:
          type: number
        athletics:
          type: number
        brawl:
          type: number
        convince:
          type: number
        empathy:
          type: number
        hide:
          type: number
        intimidate:
          type: number
        notice:
          type: number
        perform:
          type: number
        ride:
          type: number
        sailing:
          type: number
        scholarship:
          type: number
        tempt:
          type: number
        theft:
          type: number
        warfare:
          type: number
        weaponry:
          type: number
      type: object
    SeventhSeaStory: &ref_39
      additionalProperties: false
      properties:
        goal:
          type: string
        name:
          type: string
        reward:
          type: string
        steps:
          items:
            type: string
          type: array
      type: object
    SeventhSeaTraits: &ref_40
      additionalProperties: false
      properties:
        brawn:
          type: number
        finesse:
          type: number
        panache:
          type: number
        resolve:
          type: number
        wits:
          type: number
      type: object
    SeventhSeaCharacter:
      additionalProperties: false
      definitions:
        SeventhSeaAdvantage: *ref_34
        SeventhSeaArcana: *ref_35
        SeventhSeaBackground: *ref_36
        SeventhSeaBiography: *ref_37
        SeventhSeaSkills: *ref_38
        SeventhSeaStory: *ref_39
        SeventhSeaTraits: *ref_40
      properties:
        advantages:
          items:
            $ref: '#/components/schemas/SeventhSeaAdvantage'
          type: array
        arcana:
          $ref: '#/components/schemas/SeventhSeaArcana'
        backgrounds:
          items:
            $ref: '#/components/schemas/SeventhSeaBackground'
          type: array
        biography:
          $ref: '#/components/schemas/SeventhSeaBiography'
        deathSpiral:
          type: number
        heroPoints:
          type: number
        items:
          type: string
        notes:
          type: string
        portrait:
          type: string
        skills:
          $ref: '#/components/schemas/SeventhSeaSkills'
        stories:
          items:
            $ref: '#/components/schemas/SeventhSeaStory'
          type: array
        traits:
          $ref: '#/components/schemas/SeventhSeaTraits'
      type: object
    SWD6Skill: &ref_44
      additionalProperties: false
      properties:
        name:
          type: string
        value:
          type: string
      type: object
    SWD6AttributeData: &ref_41
      additionalProperties: false
      properties:
        skills:
          items:
            $ref: '#/components/schemas/SWD6Skill'
          type: array
        value:
          type: string
      type: object
    SWD6Attributes: &ref_42
      additionalProperties: false
      properties:
        dexterity:
          $ref: '#/components/schemas/SWD6AttributeData'
        knowledge:
          $ref: '#/components/schemas/SWD6AttributeData'
        mechanical:
          $ref: '#/components/schemas/SWD6AttributeData'
        perception:
          $ref: '#/components/schemas/SWD6AttributeData'
        strength:
          $ref: '#/components/schemas/SWD6AttributeData'
        technical:
          $ref: '#/components/schemas/SWD6AttributeData'
      type: object
    SWD6Biography: &ref_43
      additionalProperties: false
      properties:
        age:
          type: number
        description:
          type: string
        height:
          type: string
        name:
          type: string
        occupation:
          type: string
        species:
          type: string
        weight:
          type: string
      type: object
    SWD6Statistics: &ref_45
      additionalProperties: false
      properties:
        characterPoints:
          type: number
        darkSidePoints:
          type: number
        forcePoints:
          type: number
        forceSensitive:
          type: boolean
        move:
          type: number
      type: object
    SWD6Story: &ref_46
      additionalProperties: false
      properties:
        background:
          type: string
        connections:
          type: string
        equipment:
          type: string
        objectives:
          type: string
        personality:
          type: string
        quote:
          type: string
      type: object
    SWD6Weapon: &ref_47
      additionalProperties: false
      properties:
        ammo:
          type: string
        damage:
          type: string
        longRange:
          type: string
        mediumRange:
          type: string
        name:
          type: string
        shortRange:
          type: string
      type: object
    SWD6WoundStatus: &ref_48
      additionalProperties: false
      properties:
        doublyWounded:
          type: boolean
        incapacitated:
          type: boolean
        mortallyWounded:
          type: boolean
        stunned:
          type: boolean
        wounded:
          type: boolean
      type: object
    SWD6Character:
      additionalProperties: false
      definitions:
        SWD6AttributeData: *ref_41
        SWD6Attributes: *ref_42
        SWD6Biography: *ref_43
        SWD6Skill: *ref_44
        SWD6Statistics: *ref_45
        SWD6Story: *ref_46
        SWD6Weapon: *ref_47
        SWD6WoundStatus: *ref_48
      properties:
        abilities:
          items:
            type: string
          type: array
        attributes:
          $ref: '#/components/schemas/SWD6Attributes'
        biography:
          $ref: '#/components/schemas/SWD6Biography'
        portrait:
          type: string
        statistics:
          $ref: '#/components/schemas/SWD6Statistics'
        story:
          $ref: '#/components/schemas/SWD6Story'
        weapons:
          items:
            $ref: '#/components/schemas/SWD6Weapon'
          type: array
        woundStatus:
          $ref: '#/components/schemas/SWD6WoundStatus'
      type: object
    CharacterData:
      type: object
      properties:
        data:
          oneOf:
            - $ref: '#/components/schemas/CoCCharacter'
            - $ref: '#/components/schemas/DnD5Character'
            - $ref: '#/components/schemas/SeventhSeaCharacter'
            - $ref: '#/components/schemas/SWD6Character'
    Character:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/CharacterGameId'
        - $ref: '#/components/schemas/CharacterUserId'
        - $ref: '#/components/schemas/CharacterName'
        - $ref: '#/components/schemas/CharacterData'
        - $ref: '#/components/schemas/CreateUpdateInfo'
    CharacterList:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Character'
    CharacterCreateBody:
      allOf:
        - $ref: '#/components/schemas/CharacterGameId'
        - $ref: '#/components/schemas/CharacterName'
        - $ref: '#/components/schemas/CharacterData'
        - required:
            - gameId
            - name
            - data
    CharacterEditBody:
      allOf:
        - $ref: '#/components/schemas/CharacterName'
        - $ref: '#/components/schemas/CharacterData'
    Configuration:
      type: object
      properties:
        registrationEnabled:
          type: boolean
          description: If registration is enabled
        invitationEnabled:
          type: boolean
          description: If invitation is enabled
        defaultTheme:
          type: string
          enum:
            - light
            - dark
          description: Default theme
        defaultLocale:
          type: string
          enum:
            - en
            - fr
          description: Default language
    Game:
      type: object
      properties:
        id:
          type: string
          enum:
            - callOfCthulhu
            - dnd5
            - seventhSea
            - starWarsD6
        name:
          type: string
          description: Game name
    GameList:
      type: object
      properties:
        games:
          type: array
          items:
            $ref: '#/components/schemas/Game'
    NoteData:
      type: object
      properties:
        title:
          type: string
          description: Note title
        text:
          type: string
          description: Note text
        isShared:
          type: boolean
          description: If note is shared with other users in session
    NoteMetaData:
      type: object
      properties:
        position:
          type: number
          description: Note position used to sort notes
        userId:
          type: number
          description: Note user Id
        sessionId:
          type: number
          description: Note session Id
    Note:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/NoteData'
        - $ref: '#/components/schemas/NoteMetaData'
        - $ref: '#/components/schemas/CreateUpdateInfo'
    Notes:
      type: object
      properties:
        notes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
        sharedNotes:
          type: array
          items:
            $ref: '#/components/schemas/Note'
    NoteCreateBody:
      allOf:
        - $ref: '#/components/schemas/NoteData'
        - required:
            - title
    SessionGameId:
      type: object
      properties:
        gameId:
          type: string
          description: Game Id
    SessionMasterId:
      type: object
      properties:
        gameId:
          type: number
          description: Id of user who is game master
    SessionName:
      type: object
      properties:
        name:
          type: string
          description: Session name
    SketchImage:
      type: object
      properties:
        url:
          type: string
          description: Image URL
        width:
          type: number
          description: Image width
        height:
          type: number
          description: Image height
        x:
          type: number
          description: Image X coordinate
        'y':
          type: number
          description: Image Y coordinate
      required:
        - url
        - width
        - height
        - x
        - 'y'
    SketchToken:
      type: object
      properties:
        color:
          type: string
          description: Token color
        user:
          type: object
          nullable: true
          description: Token assigned user
          properties:
            id:
              type: number
              description: Token user Id
            name:
              type: string
              description: Token user name
        x:
          type: number
          description: Token X coordinate
        'y':
          type: number
          description: Token Y coordinate
      required:
        - color
        - user
        - x
        - 'y'
    SketchEvent:
      type: object
      properties:
        type:
          type: string
          description: Event type
        imageIndex:
          type: number
          nullable: true
          description: Event image index
        imageData:
          allOf:
            - nullable: true
            - description: Event image data
            - $ref: '#/components/schemas/SketchImage'
        tokenIndex:
          type: number
          nullable: true
          description: Event token index
        tokenData:
          allOf:
            - nullable: true
            - description: Event token data
            - $ref: '#/components/schemas/SketchToken'
        height:
          type: number
          description: Image height
        x:
          type: number
          description: Image X coordinate
        'y':
          type: number
          description: Image Y coordinate
      required:
        - type
    SessionSketch:
      type: object
      properties:
        sketch:
          type: object
          properties:
            displayed:
              type: boolean
              description: Game Id
            paths:
              type: array
              description: List of sketch drawing SVG paths
              items:
                type: string
            images:
              type: array
              description: List of sketch images
              items:
                $ref: '#/components/schemas/SketchImage'
            tokens:
              type: array
              description: List of sketch tokens
              items:
                $ref: '#/components/schemas/SketchToken'
            events:
              type: array
              description: List of sketch events
              items:
                allOf:
                  - $ref: '#/components/schemas/SketchEvent'
    Session:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/SessionGameId'
        - $ref: '#/components/schemas/SessionMasterId'
        - $ref: '#/components/schemas/SessionName'
        - $ref: '#/components/schemas/SessionSketch'
        - $ref: '#/components/schemas/CreateUpdateInfo'
    SessionList:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Session'
    SessionCreateBody:
      allOf:
        - $ref: '#/components/schemas/SessionGameId'
        - $ref: '#/components/schemas/SessionName'
        - $ref: '#/components/schemas/SessionSketch'
        - required:
            - name
            - gameId
    SessionEditBody:
      allOf:
        - $ref: '#/components/schemas/SessionName'
        - $ref: '#/components/schemas/SessionSketch'
    SketchUserId:
      type: object
      properties:
        userId:
          type: string
          description: User Id
    SketchName:
      type: object
      properties:
        name:
          type: string
          description: Session name
    Sketch:
      allOf:
        - $ref: '#/components/schemas/Id'
        - $ref: '#/components/schemas/SketchUserId'
        - $ref: '#/components/schemas/SketchName'
        - $ref: '#/components/schemas/SessionSketch'
        - $ref: '#/components/schemas/CreateUpdateInfo'
    SketchList:
      type: object
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Sketch'
    SketchCreateBody:
      allOf:
        - $ref: '#/components/schemas/SketchUserId'
        - $ref: '#/components/schemas/SketchName'
        - $ref: '#/components/schemas/SessionSketch'
        - required:
            - name
            - sketch
    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Password:
      type: object
      properties:
        password:
          type: string
          description: User password
          minLength: 6
    CreateBody:
      allOf:
        - $ref: '#/components/schemas/BaseData'
        - $ref: '#/components/schemas/MetaData'
        - $ref: '#/components/schemas/Password'
        - required:
            - name
            - email
            - password
    OldPassword:
      type: object
      properties:
        oldPassword:
          type: string
          minLength: 6
          description: User former password
    EditBody:
      allOf:
        - $ref: '#/components/schemas/MetaData'
        - $ref: '#/components/schemas/Password'
        - $ref: '#/components/schemas/OldPassword'
    InvitationCode:
      type: object
      properties:
        invitationCode:
          type: string
          description: Invitation code needed to register
    RegisterBody:
      allOf:
        - $ref: '#/components/schemas/BaseData'
        - $ref: '#/components/schemas/Password'
        - $ref: '#/components/schemas/InvitationCode'
        - required:
            - name
            - email
            - password
  responses:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        data:
          type: array
          description: Error data
          items:
            type: object
security:
  - CookieAuth: []
